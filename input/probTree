import arith
import event

typeSystem probTree =
  imports arith, eventT
  types  _:label, _:tree
  order event < label

conSpec probTreeG:probTree =
  imports arithG, event
  constructors
    notLabel : [label] -> label,
    construct : [label, numExp] -> tree,
    addBranch : [tree, label, numExp] -> tree,
    resolve : [tree, tree] -> tree


cognitiveData probTreeG =
    registration
        notLabel : icon,
        construct : icon,
        addBranch : emergent,
        resolve : search,
        infixOp : emergent,
        infixRel : emergent,
        addParentheses : emergent,
        multiply : emergent
    quantityScale
        label : nominal,
        tree : ordinal,
        real10 : ratio,
        nat10 : ratio,
        plus : interval,
        minus : interval,
        times : ratio,
        div : ratio,
        leq : ordinal,
        equals : nominal
