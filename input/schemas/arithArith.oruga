import arith
import metaLogic

typeSystem interArithArithT =
    imports arith, metaLogicT
    types {}
    order {}

conSpec interArithArith:interArithArithT =
    imports arithG, metaLogic
    constructors {
        equal : [numExp,numExp] -> metaBool
    }

comment equalNumeral:(arithG,arithG,interArithArith) =
    source {t:real10 <- ?v}
    target {t':real10 <- ?v}
    antecedent {}
    consequent {:metaTrue <-equal[t:real10,t':real10]}
    strength 0

tSchema equalNumeral':(arithG,arithG,interArithArith) =
    source {t:?v:real10}
    target {t':?v:real10}
    antecedent {}
    consequent {:metaTrue <-equal[t:?v:real10,t':?v:real10]}
    strength 0

comment equalReal:(arithG,arithG,interArithArith) =
    source {t:real10 <- makeReal[t1:nat10, t2:nat10]}
    target {t':real10 <- makeReal[t1':nat10, t2':nat10]}
    antecedent {:metaTrue <-equal[t1:nat10,t1':nat10],
               :metaTrue <-equal[t2:nat10,t2':nat10]}
    consequent {:metaTrue <-equal[t:real10,t':real10]}
    strength 1

comment equalNat:(arithG,arithG,interArithArith) =
    source {t:nat10 <- addDigit[t1:digit, t2:nat10]}
    target {t':nat10 <- addDigit[t1':digit, t2':nat10]}
    antecedent {:metaTrue <-equal[t1:digit,t1':digit],
               :metaTrue <-equal[t2:nat10,t2':nat10]}
    consequent {:metaTrue <-equal[t:nat10,t':nat10]}
    strength 2

comment equalDigit1:(arithG,arithG,interArithArith) =
    source {t:1}
    target {t':1}
    antecedent {}
    consequent {:metaTrue <-equal[t:1,t':1]}
    strength 0

comment equalDigit2:(arithG,arithG,interArithArith) =
    source {t:2}
    target {t':2}
    antecedent {}
    consequent {:metaTrue <-equal[t:2,t':2]}
    strength 0

comment equalDigit3:(arithG,arithG,interArithArith) =
    source {t:3}
    target {t':3}
    antecedent {}
    consequent {:metaTrue <-equal[t:3,t':3]}
    strength 0

comment equalDigit4:(arithG,arithG,interArithArith) =
    source {t:4}
    target {t':4}
    antecedent {}
    consequent {:metaTrue <-equal[t:4,t':4]}
    strength 0

comment equalDigit5:(arithG,arithG,interArithArith) =
    source {t:5}
    target {t':5}
    antecedent {}
    consequent {:metaTrue <-equal[t:5,t':5]}
    strength 0

comment equalDigit6:(arithG,arithG,interArithArith) =
    source {t:6}
    target {t':6}
    antecedent {}
    consequent {:metaTrue <-equal[t:6,t':6]}
    strength 0

comment equalDigit7:(arithG,arithG,interArithArith) =
    source {t:7}
    target {t':7}
    antecedent {}
    consequent {:metaTrue <-equal[t:7,t':7]}
    strength 0

comment equalDigit8:(arithG,arithG,interArithArith) =
    source {t:8}
    target {t':8}
    antecedent {}
    consequent {:metaTrue <-equal[t:8,t':8]}
    strength 0

comment equalDigit9:(arithG,arithG,interArithArith) =
    source {t:9}
    target {t':9}
    antecedent {}
    consequent {:metaTrue <-equal[t:9,t':9]}
    strength 0

comment equalDigit0:(arithG,arithG,interArithArith) =
    source {t:0}
    target {t':0}
    antecedent {}
    consequent {:metaTrue <-equal[t:0,t':0]}
    strength 0

tSchema equalVar:(arithG,arithG,interArithArith) =
    source {t:?x:var}
    target {t':?x:var}
    antecedent {}
    consequent {:metaTrue <-equal[t:?x:var,t':?x:var]}
    strength 1

tSchema equalPlus:(arithG,arithG,interArithArith) =
    source {t:numExp <- infixOp[t1:numExp,t2:plus,t3:numExp]}
    target {t':numExp <- infixOp[t1':numExp,t2':plus,t3':numExp]}
    antecedent {:metaTrue <-equal[t1:numExp,t1':numExp],
               :metaTrue <-equal[t3:numExp,t3':numExp]}
    consequent {:metaTrue <-equal[t:numExp,t':numExp]}
    strength 1

tSchema equalMinus:(arithG,arithG,interArithArith) =
    source {t:numExp <- infixOp[t1:numExp,t2:minus,t3:numExp]}
    target {t':numExp <- infixOp[t1':numExp,t2':minus,t3':numExp]}
    antecedent {:metaTrue <-equal[t1:numExp,t1':numExp],
               :metaTrue <-equal[t3:numExp,t3':numExp]}
    consequent {:metaTrue <-equal[t:numExp,t':numExp]}
    strength 1

tSchema equalDiv:(arithG,arithG,interArithArith) =
    source {t:numExp <- infixOp[t1:numExp,t2:div,t3:numExp]}
    target {t':numExp <- infixOp[t1':numExp,t2':div,t3':numExp]}
    antecedent {:metaTrue <-equal[t1:numExp,t1':numExp],
               :metaTrue <-equal[t3:numExp,t3':numExp]}
    consequent {:metaTrue <-equal[t:numExp,t':numExp]}
    strength 1
