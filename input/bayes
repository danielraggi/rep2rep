import arith
import event

typeSystem bayes =
  imports arith, eventT
  types _:condEvent, _:events, _:probEqn, _:probSys, inter, union, bin, _:problem
  order probEqn < probSys, inter < bin, union < bin, event < events, condEvent < events

conSpec bayesG:bayes =
  modes sentential
  imports arithG, event
  constructors
    makeEqn : [events,numExp] -> probEqn -- emergent,
    complement : [event] -> event -- emergent,
    infix : [event,bin,event] -> event -- emergent,
    makeCond : [event,event] -> condEvent -- emergent,
    addEqn : [probEqn,probSys] -> probSys -- emergent,
    calculate : [probSys,events] -> probSys -- emergent
