import arith
import event

typeSystem bayes =
  imports arith, eventT
  types _:condEvent, _:events, _:probEqn, _:probSys, inter, union, bin, _:problem
  order probEqn < probSys, inter < bin, union < bin, event < events, condEvent < events

conSpec bayesG:bayes =
  imports arithG, event
  constructors
    makeEqn : [events,numExp] -> probEqn,
    complement : [event] -> event,
    infix : [event,bin,event] -> event,
    makeCond : [event,event] -> condEvent,
    addEqn : [probEqn,probSys] -> probSys,
    calculate : [probSys,events] -> probSys

cognitiveData bayesG =
    registration
        makeEqn : notational-index,
        complement : notational-index,
        infix : notational-index,
        makeCond : notational-index,
        addEqn : notational-index,
        calculate : search,
        infixOp : notational-index,
        infixRel : notational-index,
        addParentheses : emergent,
        multiply : notational-index
    quantityScale
        event : nominal,
        inter : ordinal,
        union : ordinal,
        condEvent : ratio,
        probEqn : ratio,
        probSys : ratio,
        real10 : ratio,
        nat10 : ratio,
        plus : interval,
        minus : interval,
        times : ratio,
        div : ratio,
        leq : ordinal,
        equals : nominal
    complexity
        makeEqn : 18,
        makeCond : 1,
        addEqn : 1
